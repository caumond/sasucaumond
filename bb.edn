{:paths ["src/cljc"],
 :tasks
   {-env-dev {:depends [repl-clj repl-cljs]},
    :init (def dir "target/production"),
    build-uberjar
      {:doc "Build an uberjar",
       :task
         (do
           (println "Print production uberjar")
           (shell "clj -T:uberjar")
           (shell "git init -b master" {:dir dir})
           (shell
             "git remote add clever git+ssh://git@push-n3-par-clevercloud-customers.services.clever-cloud.com/app_de90b017-993e-4788-8d7f-1cdd0496dc10.git"
             {:dir dir})
           (shell "git add ." {:dir dir})
           (shell "git commit -m \"auto\"" {:dir dir}))},
    deploy {:depends [build-uberjar],
            :doc "Build and deploy",
            :task (shell "git push --force -u clever master" {:dir dir})},
    deps {:doc "Update deps", :task (shell "clj -M:antq")},
    doctor
      {:doc "Doctor checks the project pre requisites",
       :requires ([babashka.http-client :as http]
                  [clojure.string :as str]
                  [kotws.links :as klinks]),
       :task (let [r (->> klinks/full-urls
                          (mapv (fn [{:keys [url], :as tested-url}]
                                  (print "testing " (pr-str (:url tested-url)))
                                  (try (let [content (http/get url)
                                             valid? (= 200 (:status content))]
                                         (if valid?
                                           (println " -> ok")
                                           (println " -> ko"))
                                         (merge tested-url
                                                (dissoc content :uri)
                                                {:valid? valid?}))
                                       (catch Exception e
                                         (println " -> ko")
                                         (assoc tested-url :exception url))))))]
               (println "Errors: " (mapv :name (remove :valid? r))))},
    env-dev {:task (run '-env-dev {:parallel true}),
             ;;TODO Check why small screens are bad
             ;;TODO Ends resume
             :doc "Prepare dev environment (both repls and css)."},
    env-prod
      {:doc "Compile frontend and backend in production mode and start it",
       :task (do (shell "npx shadow-cljs release app") (shell "clj -X:prod"))},
    repl-clj {:doc "Start REPL", :task (shell "clj -X:repl")},
    repl-cljs {:doc "Starts cljs REPL",
               :task (shell "npx shadow-cljs watch app")}}}
